import ReactDOM from "react-dom/client"
// import App from "./App";
import React from "react"
import "./style.css"



const root = ReactDOM.createRoot(document.getElementById('root'))
const data = [
    { category: "Sporting", price: "$49.99", stocked: true, name: "Football" },
    { category: "Sporting", price: "$9.99", stocked: true, name: "Baseball" },
    { category: "Sporting", price: "$29.99", stocked: false, name: "Basketball" },
    { category: "Electronics", price: "$99.99", stocked: true, name: "iPod Touch" },
    { category: "Electronics", price: "$399.99", stocked: false, name: "iPhone 5" },
    { category: "Electronics", price: "$199.99", stocked: true, name: "Nexus 7" },
    { category: "food", price: "$99.99", stocked: true, name: "Pean" },
    { category: "food", price: "$399.99", stocked: false, name: "tomato" },
    { category: "food", price: "$199.99", stocked: true, name: "salad" },

];
let searchData = data;


function Tr(props) {
    if (props.stock) { searchData = data.filter(function (e) { return e.stocked === true }) } else {
        searchData = data
    }
    if (props.search != null && props.search !== '') {
        let regexp = new RegExp(props.search, 'i')
        searchData = searchData.filter(e => {
            return e.name.search(regexp) !== -1 || e.category.search(regexp) !== -1;
        })

    }
    let items = searchData.map(function (e, b) { return <div className={e.stocked ? "items " : "items stock"} classcat={e.category} key={b}><span><span>{e.name}</span><span className="right">{e.price}</span></span></div> })
    return (
        <div className="cats"><div className={props.class}>{props.content}</div>{items.filter(e => { return e.props.classcat === props.class; })}</div>

    )
}
function Category(props) {
    if (props.stock) { searchData = data.filter(function (e) { return e.stocked === true }) } else {
        searchData = data
    }
    if (props.search != null && props.search !== '') {
        let regexp = new RegExp(props.search, 'i')
        searchData = searchData.filter(e => {
            return e.name.search(regexp) !== -1 || e.category.search(regexp) !== -1;
        })

    }
    let arr = []
    searchData.forEach(e => {
        if (!arr.includes(e.category)) { arr.push(e.category) }
    })
    let trs = arr.map(function (e) { return <Tr stock={props.stock} search={props.search} class={e} key={e} content={<span className={"category"}>{e}</span>} /> })
    return (
        <div>{trs}</div>
    )
}
function Products(props) {
    return (
        <div>
            <div>
                <div><span>Name</span><span>Price</span></div>
            </div>
            <Category stock={props.isStock}
                search={props.searchTxt} />
        </div>
    )

}
class Form extends React.Component {
    constructor(props) {
        super(props);
        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
        this.handleCheck = this.handleCheck.bind(this);
    }
    handleChange(e) {
        this.props.onSearchText(e.target.value)
        this.setState({ search: e.target.value })
    }
    handleCheck(e) {
        this.props.onSearchStock(e.target.checked)
    }
    handleSubmit(e) {
        if (this.state.search) {
            if (this.state.showStock === true) {
            }
        }
        e.preventDefault();
    }
    render() {
        return (
            <form onSubmit={this.handleSubmit}>
                <input type="search" onChange={this.handleChange} placeholder="Search..." value={this.props.search} /><br />
                <label><input type="checkbox" checked={this.props.showStock} onChange={this.handleCheck} />Only show products in stock</label>
            </form>
        )
    }
}
class App extends React.Component {
    constructor(props) {
        super(props);
        this.handleSearchStock = this.handleSearchStock.bind(this);
        this.handleSearchText = this.handleSearchText.bind(this);
        this.state = { showStock: false, search: '' }
    }
    handleSearchStock(value) {
        this.setState({ showStock: value })
    }
    handleSearchText(value) {
        this.setState({ search: value })
    }
    render() {
        return (
            <div className="app">
                <Form
                    onSearchStock={this.handleSearchStock}
                    onSearchText={this.handleSearchText}
                    showStock={this.state.showStock}
                    search={this.state.search} />
                <Products isStock={this.state.showStock}
                    searchTxt={this.state.search} />
            </div>
        );
    }
}
root.render(<App />)
// function BoilingVerdict(props) {
//     if (props.celsius >= 100) {
//         return <p>The water would boil.</p>;
//     }
//     return <p>The water would not boil.</p>;
// }
// function toCelsius(fahrenheit) {
//     return (fahrenheit - 32) * 5 / 9;
// }
// function tryConvert(temperature, convert) {
//     const input = parseFloat(temperature);
//     if (Number.isNaN(input)) {
//         return '';
//     }
//     const output = convert(input);
//     const rounded = Math.round(output * 1000) / 1000;
//     return rounded.toString();
// }
// function toFahrenheit(celsius) {
//     return (celsius * 9 / 5) + 32;
// }
// const scaleNames = { c: 'Celsius', f: 'Fahrenheit' };
// class TemperatureInput extends React.Component {
//     constructor(props) {
//         super(props);
//         this.handleChange = this.handleChange.bind(this);
//     }

//     handleChange(e) {
//         this.props.onTemperatureChange(e.target.value);
//     }

//     render() {
//         const temperature = this.props.temperature; const scale = this.props.scale;
//         return (
//             <fieldset>
//                 <legend>Enter temperature in {scaleNames[scale]}:</legend>
//                 <input value={temperature}
//                     onChange={this.handleChange} />
//             </fieldset>
//         );
//     }
// } class Calculator extends React.Component {
//     constructor(props) {
//         super(props);
//         this.handleCelsiusChange = this.handleCelsiusChange.bind(this);
//         this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);
//         this.state = { temperature: '', scale: 'c' };
//     }

//     handleCelsiusChange(temperature) {
//         this.setState({ scale: 'c', temperature });
//     }

//     handleFahrenheitChange(temperature) {
//         this.setState({ scale: 'f', temperature });
//     }

//     render() {
//         const scale = this.state.scale; const temperature = this.state.temperature; const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature; const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;
//         return (
//             <div>
//                 <TemperatureInput
//                     scale="c"
//                     temperature={celsius} onTemperatureChange={this.handleCelsiusChange} />        <TemperatureInput
//                     scale="f"
//                     temperature={fahrenheit} onTemperatureChange={this.handleFahrenheitChange} />        <BoilingVerdict
//                     celsius={parseFloat(celsius)} />      </div>
//         );
//     }
// }
/////////////////////////////////////////////////////////////////////////////////
import ReactDOM from "react-dom/client"
import React from "react"
import "./style.css";


function Square(props) {
    return (
        <button className="square" onClick={props.onClick}>
            {props.value}
        </button>
    );
}

class Board extends React.Component {
    renderSquare(i) {
        return (
            <Square
                value={this.props.squares[i]}
                onClick={() => this.props.onClick(i)}
            />
        );
    }

    render() {
        return (
            <div>
                <div className="board-row">
                    {this.renderSquare(0)}
                    {this.renderSquare(1)}
                    {this.renderSquare(2)}
                </div>
                <div className="board-row">
                    {this.renderSquare(3)}
                    {this.renderSquare(4)}
                    {this.renderSquare(5)}
                </div>
                <div className="board-row">
                    {this.renderSquare(6)}
                    {this.renderSquare(7)}
                    {this.renderSquare(8)}
                </div>
            </div>
        );
    }
}

class Game extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            history: [
                {
                    squares: Array(9).fill(null)
                }
            ],
            stepNumber: 0,
            xIsNext: true
        };
    }

    handleClick(i) {
        const history = this.state.history.slice(0, this.state.stepNumber + 1);
        const current = history[history.length - 1];
        const squares = current.squares.slice();
        if (calculateWinner(squares) || squares[i]) {
            return;
        }
        squares[i] = this.state.xIsNext ? "X" : "O";
        this.setState({
            history: history.concat([
                {
                    squares: squares
                }
            ]),
            stepNumber: history.length,
            xIsNext: !this.state.xIsNext
        });
    }

    jumpTo(step) {
        this.setState({
            stepNumber: step,
            xIsNext: (step % 2) === 0
        });
    }

    render() {
        const history = this.state.history;
        const current = history[this.state.stepNumber];
        const winner = calculateWinner(current.squares);

        const moves = history.map((step, move) => {
            const desc = move ?
                'Go to move #' + move :
                'Go to game start';
            return (
                <li key={move}>
                    <button onClick={() => this.jumpTo(move)}>{desc}</button>
                </li>
            );
        });

        let status;
        if (winner) {
            status = "Winner: " + winner;
        } else {
            status = "Next player: " + (this.state.xIsNext ? "X" : "O");
        }

        return (
            <div className="game">
                <div className="game-board">
                    <Board
                        squares={current.squares}
                        onClick={i => this.handleClick(i)}
                    />
                </div>
                <div className="game-info">
                    <div>{status}</div>
                    <ol>{moves}</ol>
                </div>
            </div>
        );
    }
}

// ========================================

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<Game />);

function calculateWinner(squares) {
    const lines = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6]
    ];
    for (let i = 0; i < lines.length; i++) {
        const [a, b, c] = lines[i];
        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
            return squares[a];
        }
    }
    return null;
}
/////////////////////////////////////////////////////////////////////////////////
import ReactDOM from "react-dom/client"
// import App from "./App";
import React from "react"
import "./style.css"

const root = ReactDOM.createRoot(document.getElementById('root'))
const data = [
    { category: "Sporting", price: "$49.99", stocked: true, name: "Football" },
    { category: "Sporting", price: "$9.99", stocked: true, name: "Baseball" },
    { category: "Sporting", price: "$29.99", stocked: false, name: "Basketball" },
    { category: "Electronics", price: "$99.99", stocked: true, name: "iPod Touch" },
    { category: "Electronics", price: "$399.99", stocked: false, name: "iPhone 5" },
    { category: "Electronics", price: "$199.99", stocked: true, name: "Nexus 7" },
    { category: "food", price: "$99.99", stocked: true, name: "Pean" },
    { category: "food", price: "$399.99", stocked: false, name: "tomato" },
    { category: "food", price: "$199.99", stocked: true, name: "salad" },

];
const SearchContext = React.createContext('');
let searchData = data;


class Tr extends React.Component {
    constructor(props) {
        super(props);
    }
    static contextType = SearchContext;
    render() {
        if (this.context.stock) { searchData = data.filter(function (e) { return e.stocked === true }) } else {
            searchData = data
        }
        if (this.context.search != null && this.context.search !== '') {
            let regexp = new RegExp(this.context.search, 'i')
            searchData = searchData.filter(e => {
                return e.name.search(regexp) !== -1 || e.category.search(regexp) !== -1;
            })

        }
        let items = searchData.map(function (e, b) { return <div className={e.stocked ? "items " : "items stock"} classcat={e.category} key={b}><span><span>{e.name}</span><span className="right">{e.price}</span></span></div> })
        return (
            <div className="cats"><div className={this.props.class}>{this.props.content}</div>{items.filter(e => { return e.props.classcat === this.props.class; })}</div>

        )
    }
}
class Category extends React.Component {

    static contextType = SearchContext;
    render() {
        if (this.context.stock) { searchData = data.filter(function (e) { return e.stocked === true }) } else {
            searchData = data
        }
        if (this.context.search != null && this.context.search !== '') {
            let regexp = new RegExp(this.context.search, 'i')
            searchData = searchData.filter(e => {
                return e.name.search(regexp) !== -1 || e.category.search(regexp) !== -1;
            })

        }
        let arr = []
        searchData.forEach(e => {
            if (!arr.includes(e.category)) { arr.push(e.category) }
        })
        let trs = arr.map(function (e) { return <Tr class={e} key={e} content={<span className={"category"}>{e}</span>} /> })
        return (
            <div>{trs}</div>
        )
    }
}
function Products() {
    return (
        <div className="products">
            <div>
                <div><span>Name</span><span>Price</span></div>
            </div>
            <Category />
        </div>
    )

}
class Form extends React.Component {
    constructor(props) {
        super(props);
        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
        this.handleCheck = this.handleCheck.bind(this);
    }
    static contextType = SearchContext;
    handleChange(e) {
        this.props.onSearchText(e.target.value)
        this.setState({ search: e.target.value })
    }
    handleCheck(e) {
        this.props.onSearchStock(e.target.checked)
    }
    handleSubmit(e) {
        e.preventDefault();
    }
    render() {
        return (
            <form onSubmit={this.handleSubmit}>
                <input type="search" onChange={this.handleChange} placeholder="Search..." value={this.context.search} /><br />
                <label><input type="checkbox" checked={this.context.stock} onChange={this.handleCheck} />Only show products in stock</label>
            </form>
        )
    }
}
class App extends React.Component {
    constructor(props) {
        super(props);
        this.handleSearchStock = this.handleSearchStock.bind(this);
        this.handleSearchText = this.handleSearchText.bind(this);
        this.state = { showStock: false, search: '' }
    }
    handleSearchStock(value) {
        this.setState({ showStock: value })
    }
    handleSearchText(value) {
        this.setState({ search: value })
    }
    render() {
        return (
            <React.StrictMode>
                <SearchContext.Provider value={{ search: this.state.search, stock: this.state.showStock }}>
                    <div className="app">
                        <Form
                            onSearchStock={this.handleSearchStock}
                            onSearchText={this.handleSearchText}
                        />
                        <Products isStock={this.state.showStock}
                            searchTxt={this.state.search} />
                    </div>
                </SearchContext.Provider>
            </React.StrictMode>
        );
    }
}
root.render(<App />)
////////////////////////////////////////////////////////////////////////////////////////
import React, { useContext } from "react"
import "./style.css"

const data = [
  { category: "Sporting", price: "$49.99", stocked: true, name: "Football" },
  { category: "Sporting", price: "$9.99", stocked: true, name: "Baseball" },
  { category: "Sporting", price: "$29.99", stocked: false, name: "Basketball" },
  { category: "Electronics", price: "$99.99", stocked: true, name: "iPod Touch" },
  { category: "Electronics", price: "$399.99", stocked: false, name: "iPhone 5" },
  { category: "Electronics", price: "$199.99", stocked: true, name: "Nexus 7" },
  { category: "food", price: "$99.99", stocked: true, name: "Pean" },
  { category: "food", price: "$399.99", stocked: false, name: "tomato" },
  { category: "food", price: "$199.99", stocked: true, name: "salad" },

];
const SearchContext = React.createContext();
let searchData = data;


function Tr(props) {
  const search = useContext(SearchContext)

  if (search.stock) { searchData = data.filter(function (e) { return e.stocked === true }) } else {
    searchData = data
  }
  if (search.search != null && search.search !== '') {
    let regexp = new RegExp(search.search, 'i')
    searchData = searchData.filter(e => {
      return e.name.search(regexp) !== -1 || e.category.search(regexp) !== -1;
    })

  }
  let items = searchData.map(function (e, b) { return <div className={e.stocked ? "items " : "items stock"} classcat={e.category} key={b}><span><span>{e.name}</span><span className="right">{e.price}</span></span></div> })
  return (
    <div className="cats"><div className={props.class}>{props.content}</div>{items.filter(e => { return e.props.classcat === props.class; })}</div>

  )
}
function Category() {

  const search = useContext(SearchContext)
  if (search.stock) { searchData = data.filter(function (e) { return e.stocked === true }) } else {
    searchData = data
  }
  if (search.search != null && search.search !== '') {
    let regexp = new RegExp(search.search, 'i')
    searchData = searchData.filter(e => {
      return e.name.search(regexp) !== -1 || e.category.search(regexp) !== -1;
    })

  }
  let arr = []
  searchData.forEach(e => {
    if (!arr.includes(e.category)) { arr.push(e.category) }
  })
  let trs = arr.map(function (e) { return <Tr class={e} key={e} content={<span className={"category"}>{e}</span>} /> })
  return (
    <div>{trs}</div>
  )
}
function Products() {
  return (
    <div className="products">
      <div>
        <div><span>Name</span><span>Price</span></div>
      </div>
      <Category />
    </div>
  )

}
class Form extends React.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleCheck = this.handleCheck.bind(this);
  }
  static contextType = SearchContext;
  handleChange(e) {
    this.props.onSearchText(e.target.value)
    this.setState({ search: e.target.value })
  }
  handleCheck(e) {
    this.props.onSearchStock(e.target.checked)
  }
  handleSubmit(e) {
    e.preventDefault();
  }
  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <input type="search" onChange={this.handleChange} placeholder="Search..." value={this.context.search} /><br />
        <label><input type="checkbox" checked={this.context.stock} onChange={this.handleCheck} />Only show products in stock</label>
      </form>
    )
  }
}
function App() {
  const [showStock, setShowStock] = React.useState(false)
  const [search, setSearch] = React.useState('')
  function handleSearchStock(value) {
    setShowStock(value)
  }
  function handleSearchText(value) {
    setSearch(value)
  }
  return (
    <React.StrictMode>
      <SearchContext.Provider value={{ search: search, stock: showStock }}>
        <div className="app">
          <Form
            onSearchStock={handleSearchStock}
            onSearchText={handleSearchText}
          />
          <Products isStock={showStock}
            searchTxt={search} />
        </div>
      </SearchContext.Provider>
    </React.StrictMode>
  );
}

export default App;

